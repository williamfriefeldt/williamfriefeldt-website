import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, o as onMount, e as element, c as claim_element, a as children, b as detach_dev, f as attr_dev, h as add_location, j as insert_dev, n as noop, k as create_component, l as claim_component, m as mount_component, t as transition_in, p as transition_out, q as destroy_component } from './client.a17abbad.js';

/* src\components\jsxgraph\JsxGraph.svelte generated by Svelte v3.29.3 */
const file = "src\\components\\jsxgraph\\JsxGraph.svelte";

function create_fragment(ctx) {
	let div;

	const block = {
		c: function create() {
			div = element("div");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true, class: true });
			children(div).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "id", "box");
			attr_dev(div, "class", "jxgbox svelte-1gxcej6");
			add_location(div, file, 123, 0, 3691);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("JsxGraph", slots, []);
	onMount(() => setJXG(window.JXG));

	//Set JXG Board and objects
	const setJXG = JXG => {
		const board = JXG.JSXGraph.initBoard("box", {
			boundingbox: [-8, 4, 8, -4],
			showNavigation: false,
			showCopyright: false
		});

		const mainNode = board.create("point", [-6, 3], { visible: false });

		const eye = board.create("point", [() => mainNode.X() + 0.2, () => mainNode.Y() + 0.15], {
			fillcolor: "black",
			strokeColor: "black",
			size: 1.5
		});

		eye.setLabel("");

		const mouth = board.create(
			"segment",
			[
				[() => mainNode.X() + 0.1, () => mainNode.Y() - 0.15],
				[() => mainNode.X() + 0.46, () => mainNode.Y() - 0.15]
			],
			{ strokeColor: "black" }
		);

		const head = board.create("circle", [() => [mainNode.X(), mainNode.Y()], 0.5], { strokeColor: "black" });

		const bodyNodes = [
			() => [mainNode.X(), mainNode.Y() - 0.5],
			() => [mainNode.X(), mainNode.Y() - 1.5]
		];

		const body = board.create("segment", bodyNodes, { strokeColor: "black" });

		const moveLegsNode = board.create("point", [0, 0], { visible: false });

		const legs = [
			board.create(
				"segment",
				[
					bodyNodes[1],
					() => [
						Math.cos(Math.PI * 4 / 3 + moveLegsNode.X()) + bodyNodes[1]()[0],
						Math.sin(Math.PI * 4 / 3 + moveLegsNode.X()) + bodyNodes[1]()[1]
					]
				],
				{ strokeColor: "black" }
			),
			board.create(
				"segment",
				[
					bodyNodes[1],
					() => [
						Math.cos(Math.PI * 5 / 3 - moveLegsNode.X()) + bodyNodes[1]()[0],
						Math.sin(Math.PI * 5 / 3 - moveLegsNode.X()) + bodyNodes[1]()[1]
					]
				],
				{ strokeColor: "black" }
			)
		];

		const midBody = () => [mainNode.X(), mainNode.Y() - 1];

		const arms = [
			board.create(
				"segment",
				[
					midBody,
					() => [
						Math.cos(Math.PI * 5 / 4 + moveLegsNode.X()) + midBody()[0],
						Math.sin(Math.PI * 5 / 4 + moveLegsNode.X()) + midBody()[1]
					]
				],
				{ strokeColor: "black" }
			),
			board.create(
				"segment",
				[
					midBody,
					() => [
						Math.cos(Math.PI * 7 / 4 - moveLegsNode.X()) + midBody()[0],
						Math.sin(Math.PI * 7 / 4 - moveLegsNode.X()) + midBody()[1]
					]
				],
				{ strokeColor: "black" }
			)
		];

		const moveLegs = i => {
			let posNeg = i % 2 === 0 ? 1 : -1;
			let movePI = posNeg === 1 ? Math.PI / 3 : Math.PI / 28;

			if (i !== 5) {
				i++;
				moveLegsNode.moveTo([posNeg * movePI, 0], 1000);

				setTimeout(
					() => {
						moveLegs(i);
					},
					1000
				);
			}
		};

		setTimeout(
			() => {
				mainNode.moveTo([0, 3], 5000);
				moveLegs(0);
			},
			1000
		);

		setTimeout(
			() => {
				eye.setAttribute("visible:false");

				const firstEye = board.create("point", [0.2, 3.15], {
					fillcolor: "black",
					strokeColor: "black",
					size: 1.5
				});

				firstEye.setLabel("");
				firstEye.moveTo([-0.2, 3.15], 1000);
				mouth.setAttribute("visible:false");
				const newMouth = board.create("segment", [[0.1, 2.85], [0.46, 2.85]], { strokeColor: "black" });
				newMouth.point1.moveTo([-0.2, 2.85], 1000);
				newMouth.point2.moveTo([0.16, 2.85], 1000);
			},
			6500
		);

		setTimeout(
			() => {
				const secondEye = board.create("point", [0.45, 3.15], {
					fillcolor: "black",
					strokeColor: "black",
					size: 1.5
				});

				secondEye.setLabel("");
				secondEye.moveTo([0.2, 3.15], 500);
			},
			7000
		);

		setTimeout(
			() => {
				arms[0].point1 = [0, 0];
			},
			8500
		);
	};

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<JsxGraph> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ onMount, setJXG });
	return [];
}

class JsxGraph extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "JsxGraph",
			options,
			id: create_fragment.name
		});
	}
}

/* src\routes\animation.svelte generated by Svelte v3.29.3 */

function create_fragment$1(ctx) {
	let jsxgraph;
	let current;
	jsxgraph = new JsxGraph({ $$inline: true });

	const block = {
		c: function create() {
			create_component(jsxgraph.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(jsxgraph.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(jsxgraph, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(jsxgraph.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(jsxgraph.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(jsxgraph, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Animation", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Animation> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ JsxGraph });
	return [];
}

class Animation extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Animation",
			options,
			id: create_fragment$1.name
		});
	}
}

export default Animation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
