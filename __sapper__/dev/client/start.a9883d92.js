import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, Q as assign, R as IconBase, v as validate_slots, T as exclude_internal_props, k as create_component, l as claim_component, m as mount_component, U as get_spread_update, V as get_spread_object, t as transition_in, p as transition_out, q as destroy_component, W as svg_element, c as claim_element, a as children, b as detach_dev, f as attr_dev, h as add_location, j as insert_dev, e as element, E as empty, F as group_outros, G as check_outros, X as readable, Y as create_slot, Z as createEventDispatcher, _ as beforeUpdate, N as listen_dev, n as noop, A as set_style, y as space, z as claim_space, $ as toggle_class, B as append_dev, a0 as is_function, a1 as update_slot, x as validate_each_argument, a2 as validate_each_keys, o as onMount, a3 as update_keyed_each, a4 as binding_callbacks, a5 as outro_and_destroy_block, a6 as bind, a7 as validate_store, a8 as component_subscribe, H as text, I as claim_text, a9 as add_flush_callback, aa as set_data_dev, L as fade, C as destroy_each, O as query_selector_all, J as add_render_callback, K as create_bidirectional_transition } from './client.3d20db51.js';
import { F as FaArrowAltCircleDown } from './FaArrowAltCircleDown.5ebd08d9.js';

/* node_modules\svelte-icons\io\IoIosCode.svelte generated by Svelte v3.29.3 */
const file = "node_modules\\svelte-icons\\io\\IoIosCode.svelte";

// (4:8) <IconBase viewBox="0 0 512 512" {...$$props}>
function create_default_slot(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M332 142.7c-1.2-1.1-2.7-1.7-4.1-1.7s-3 .6-4.1 1.7L310 155.9c-1.2 1.1-1.9 2.7-1.9 4.3 0 1.6.7 3.2 1.9 4.3l95.8 91.5-95.8 91.5c-1.2 1.1-1.9 2.7-1.9 4.3 0 1.6.7 3.2 1.9 4.3l13.8 13.2c1.2 1.1 2.6 1.7 4.1 1.7 1.5 0 3-.6 4.1-1.7l114.2-109c1.2-1.1 1.9-2.7 1.9-4.3 0-1.6-.7-3.2-1.9-4.3L332 142.7zM204 160.2c0-1.6-.7-3.2-1.9-4.3l-13.8-13.2c-1.2-1.1-2.7-1.7-4.1-1.7s-3 .6-4.1 1.7l-114.2 109c-1.2 1.1-1.9 2.7-1.9 4.3 0 1.6.7 3.2 1.9 4.3l114.2 109c1.2 1.1 2.7 1.7 4.1 1.7 1.5 0 3-.6 4.1-1.7l13.8-13.2c1.2-1.1 1.9-2.7 1.9-4.3 0-1.6-.7-3.2-1.9-4.3L106.3 256l95.8-91.5c1.2-1.1 1.9-2.7 1.9-4.3z");
			add_location(path, file, 4, 10, 153);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(4:8) <IconBase viewBox=\\\"0 0 512 512\\\" {...$$props}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let iconbase;
	let current;
	const iconbase_spread_levels = [{ viewBox: "0 0 512 512" }, /*$$props*/ ctx[0]];

	let iconbase_props = {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	for (let i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}

	iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			create_component(iconbase.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(iconbase.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const iconbase_changes = (dirty & /*$$props*/ 1)
			? get_spread_update(iconbase_spread_levels, [iconbase_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 2) {
				iconbase_changes.$$scope = { dirty, ctx };
			}

			iconbase.$set(iconbase_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("IoIosCode", slots, []);

	$$self.$$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({ IconBase });

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class IoIosCode extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "IoIosCode",
			options,
			id: create_fragment.name
		});
	}
}

/* src\components\Icon.svelte generated by Svelte v3.29.3 */
const file$1 = "src\\components\\Icon.svelte";

// (18:0) {#if iconName === 'code'}
function create_if_block(ctx) {
	let div;
	let ioioscode;
	let current;
	ioioscode = new IoIosCode({ props: { class: "icon" }, $$inline: true });

	const block = {
		c: function create() {
			div = element("div");
			create_component(ioioscode.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(ioioscode.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "svelte-fpll7f");
			add_location(div, file$1, 17, 26, 305);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(ioioscode, div, null);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(ioioscode.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(ioioscode.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(ioioscode);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(18:0) {#if iconName === 'code'}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*iconName*/ ctx[0] === "code" && create_if_block(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*iconName*/ ctx[0] === "code") {
				if (if_block) {
					if (dirty & /*iconName*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Icon", slots, []);
	let { iconName } = $$props;
	const writable_props = ["iconName"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Icon> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("iconName" in $$props) $$invalidate(0, iconName = $$props.iconName);
	};

	$$self.$capture_state = () => ({ iconName, IoIosCode });

	$$self.$inject_state = $$props => {
		if ("iconName" in $$props) $$invalidate(0, iconName = $$props.iconName);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [iconName];
}

class Icon extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { iconName: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Icon",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*iconName*/ ctx[0] === undefined && !("iconName" in props)) {
			console.warn("<Icon> was created without expected prop 'iconName'");
		}
	}

	get iconName() {
		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set iconName(value) {
		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const personalLetter = "Jag heter William och är 26 år gammal från Stockholm. Med ett tidigt intresse för matematik och havet studerade jag på Marina Läroverket i Stocksund, inriktning natur och marinbiologi. Efter gymnasiet jobbade jag ett år, på kryssningsfartyg i Medelhavet och som brevbärare, och sen reste jag i Sydostasien. Jag hade sedan gymnasiet haft siktet på Kungliga Tekniska Högskolan. Därför sökte jag till linjen Civilingenjör och Lärare eftersom jag ville kombinera mitt tekniska intresse med min sociala kompetens. Under andra året på utbildningen valde jag inriktningen informations- och kommunikationsteknik. Utbildningen ger mig möjlighet att jobba som gymnasielärare i matematik, teknik och programmering men även som civilingenjör inom programmering och IT. Under utbildningen fick jag goda kunskaper inom programmering, framförallt inom frontend-utveckling. var att skriva lösningar i Latex och göra grafer i Javascript med biblioteket JSXGraph. Efter mitt examensarbete inom digitalt lärande på Mathleaks fick jag erbjudande om heltidsanställning. Med två kurser kvar på utbildning valde jag att ta jobbet då jag såg det som en stor möjlighet att utvecklas på ett startup. Under mina första två år på Mathleaks har jag drivit fler projekt, blandad annat produktutvecklingen inför USA lanseringen. Det har gjort mig flytande i såväl formell engelska som Latex. Jag har fått jobba med projektledning med Trello och interna system med Javascript, HTML, CSS och AngularJS. Senaste projektet var att sätta upp en Node-server för rendrering av Javascript till statiska SVG-filer. IT- teamet jobbar remote vilket har gjort att vikten på Git och Bitbucket har varit stor. Jag har lärt mig att granska andras kod samtidigt som jag själv kunnat utvecklas genom feedback. Jag känner nu att det är dags att ta steget till att bli en renodlad programmerare. Jag har fått upp ett stort intresse för programmering och har som hobbyprojekt skapat hemsidan https://poddsok.nu. Det är en hemsida där användare kan hitta ord och meningar som nämns i podcasts. Den är byggd med AngularJS, Firebase som backend och med API:er från Spotify och Itunes. På den här banan vill jag fortsätta kombinera min touch för design med mitt logiska och tekniska tänkande för att lär mig de senaste ramverken och biblioteket inom frontend Jag söker mig därför till er då jag tror jag kommer kunna utvecklas enormt men även bidra mycket med min pedagogiska bakgrund. Den är inte bara användbar i skolan utan i alla delar av samhället. Något jag märkt framförallt under mina år på Mathleaks är att det är lättare för mig att förstå en icke programmerar och översätta hens tankar till kod. Som konsult tror jag det är bra att vara mångsidig och ha lätt för att sammarbeta. Jag tycker den sociala delen och kollegorna är en viktig del av yrket. Efter att ha jobbat på engelska både skriftligt och muntligt är jag väldigt bekväm med språket och känner att det även utvecklat mitt sätt att skriva kod. Jag har blivit mer strukturerad och bättre på att skriva lättläslig kod. Med detta kommer att jag har lättare att ta till mig och lära mig nya områden inom programmering självmant. Jag tror jag kommer kunna bidra med nya och kreativa idéer samt leverans på utsatta deadlines. Under det senaste året har jag verkligen förstått innebörden av hårt arbete och var man kan nå om man bara har viljan och drivet. Jag har implementerat både sökalgoritmer, formulär och layout för data från t.ex. API- anropp. Det tror jag är fördelaktiga kunskaper för att passa i era team och hjälpa företag att digitalisera sin kommunikation och kundhantering. Om ni har några frågor eller vill veta något mer är det bara att höra av er!";

let getPersonalLetter = readable( personalLetter );

const debounce = (fn, ms = 0) => {
  let timeoutId;
  return function (...args) {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => fn.apply(this, args), ms);
  };
};

function getRowsCount(items, cols) {
  return Math.max(
    ...items.map((val) => {
      const item = val[cols];
      return item?.y + item?.h;
    }),
    1,
  );
}

const getColumn = (containerWidth, columns) => {
  try {
    let [_, cols] = columns
      .slice()
      .reverse()
      .find((value) => {
        const [width, cols] = value;
        return containerWidth <= width;
      });
    return cols;
  } catch {
    return columns[columns.length - 1];
  }
};

function getContainerHeight(items, yPerPx, cols) {
  return getRowsCount(items, cols) * yPerPx;
}

const makeMatrix = (rows, cols) => Array.from(Array(rows), () => new Array(cols)); // make 2d array

function findCloseBlocks(items, matrix, curObject) {
  const { h, x, y } = curObject;

  const w = Math.min(matrix[0].length, curObject.w);
  const tempR = matrix.slice(y, y + h);

  let result = [];
  for (var i = 0; i < tempR.length; i++) {
    let tempA = tempR[i].slice(x, x + w);
    result = [...result, ...tempA.map((val) => val.id && val.id !== curObject.id && val.id).filter(Boolean)];
  }

  return [...new Set(result)];
}

function makeMatrixFromItemsIgnore(items, ignoreList, _row, _col) {
  let matrix = makeMatrix(_row, _col);
  for (var i = 0; i < items.length; i++) {
    const value = items[i][_col];
    const id = items[i].id;
    const { x, y, h } = value;
    const w = Math.min(_col, value.w);

    if (ignoreList.indexOf(id) === -1) {
      for (var j = y; j < y + h; j++) {
        const row = matrix[j];
        if (row) {
          for (var k = x; k < x + w; k++) {
            row[k] = { ...value, id };
          }
        }
      }
    }
  }
  return matrix;
}

function findItemsById(closeBlocks, items) {
  return items.filter((value) => closeBlocks.indexOf(value.id) !== -1);
}

function getItemById(id, items) {
  return items.find((value) => value.id === id);
}

function findFreeSpaceForItem(matrix, item, items = []) {
  const cols = matrix[0].length;
  const w = Math.min(cols, item.w);
  let xNtime = cols - w;

  for (var i = 0; i < matrix.length; i++) {
    const row = matrix[i];
    for (var j = 0; j < xNtime + 1; j++) {
      const sliceA = row.slice(j, j + w);
      const empty = sliceA.every((val) => val === undefined);
      if (empty) {
        const isEmpty = matrix.slice(i, i + item.h).every((a) => a.slice(j, j + w).every((n) => n === undefined));

        if (isEmpty) {
          return { y: i, x: j };
        }
      }
    }
  }

  return {
    y: getRowsCount(items, cols),
    x: 0,
  };
}

const getItem = (item, col) => {
  return { ...item[col], id: item.id };
};

const updateItem = (elements, active, position, col) => {
  return elements.map((value) => {
    if (value.id === active.id) {
      return { ...value, [col]: { ...value[col], ...position } };
    }
    return value;
  });
};

function moveItem(active, items, cols, original) {
  // Get current item from the breakpoint
  const item = getItem(active, cols);
  // Create matrix from the items expect the active
  let matrix = makeMatrixFromItemsIgnore(items, [item.id], getRowsCount(items, cols), cols);
  // Getting the ids of items under active Array<String>
  const closeBlocks = findCloseBlocks(items, matrix, item);
  // Getting the objects of items under active Array<Object>
  let closeObj = findItemsById(closeBlocks, items);
  // Getting whenever of these items is fixed
  const fixed = closeObj.find((value) => value[cols].fixed);

  // If found fixed, reset the active to its original position
  if (fixed) return items;

  // Update items
  items = updateItem(items, active, item, cols);

  // Create matrix of items expect close elements
  matrix = makeMatrixFromItemsIgnore(items, closeBlocks, getRowsCount(items, cols), cols);

  // Create temp vars
  let tempItems = items;
  let tempCloseBlocks = closeBlocks;

  // Exclude resolved elements ids in array
  let exclude = [];

  // Iterate over close elements under active item
  closeObj.forEach((item) => {
    // Find position for element
    let position = findFreeSpaceForItem(matrix, item[cols], tempItems);
    // Exclude item
    exclude.push(item.id);

    // If position is found
    if (position) {
      // Assign the position to the element in the column
      tempItems = updateItem(tempItems, item, position, cols);

      // Recreate ids of elements
      let getIgnoreItems = tempCloseBlocks.filter((value) => exclude.indexOf(value) === -1);

      // Update matrix for next iteration
      matrix = makeMatrixFromItemsIgnore(tempItems, getIgnoreItems, getRowsCount(tempItems, cols), cols);
    }
  });

  // Return result
  return tempItems;
}

/* node_modules\svelte-grid\src\MoveResize\index.svelte generated by Svelte v3.29.3 */
const file$2 = "node_modules\\svelte-grid\\src\\MoveResize\\index.svelte";
const get_default_slot_changes = dirty => ({});
const get_default_slot_context = ctx => ({ pointerdown: /*pointerdown*/ ctx[14] });

// (82:2) {#if resizable}
function create_if_block_1(ctx) {
	let div;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			children(div).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "svlt-grid-resizer svelte-gu74pr");
			add_location(div, file$2, 82, 4, 1999);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (!mounted) {
				dispose = listen_dev(div, "pointerdown", /*resizePointerDown*/ ctx[15], false, false, false);
				mounted = true;
			}
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(82:2) {#if resizable}",
		ctx
	});

	return block;
}

// (87:0) {#if active}
function create_if_block$1(ctx) {
	let div;

	const block = {
		c: function create() {
			div = element("div");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			children(div).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "svlt-grid-shadow transition shadow-active svelte-gu74pr");
			set_style(div, "width", /*shadow*/ ctx[11].w * /*xPerPx*/ ctx[6] - /*gapX*/ ctx[8] * 2 + "px");
			set_style(div, "height", /*shadow*/ ctx[11].h * /*yPerPx*/ ctx[7] - /*gapY*/ ctx[9] * 2 + "px");
			set_style(div, "transform", "translate(" + (/*shadow*/ ctx[11].x * /*xPerPx*/ ctx[6] + /*gapX*/ ctx[8]) + "px, " + (/*shadow*/ ctx[11].y * /*yPerPx*/ ctx[7] + /*gapY*/ ctx[9]) + "px)");
			add_location(div, file$2, 87, 2, 2099);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*shadow, xPerPx, gapX*/ 2368) {
				set_style(div, "width", /*shadow*/ ctx[11].w * /*xPerPx*/ ctx[6] - /*gapX*/ ctx[8] * 2 + "px");
			}

			if (dirty[0] & /*shadow, yPerPx, gapY*/ 2688) {
				set_style(div, "height", /*shadow*/ ctx[11].h * /*yPerPx*/ ctx[7] - /*gapY*/ ctx[9] * 2 + "px");
			}

			if (dirty[0] & /*shadow, xPerPx, gapX, yPerPx, gapY*/ 3008) {
				set_style(div, "transform", "translate(" + (/*shadow*/ ctx[11].x * /*xPerPx*/ ctx[6] + /*gapX*/ ctx[8]) + "px, " + (/*shadow*/ ctx[11].y * /*yPerPx*/ ctx[7] + /*gapY*/ ctx[9]) + "px)");
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(87:0) {#if active}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let div;
	let t0;
	let t1;
	let if_block1_anchor;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[22].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[21], get_default_slot_context);
	let if_block0 = /*resizable*/ ctx[4] && create_if_block_1(ctx);
	let if_block1 = /*active*/ ctx[12] && create_if_block$1(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);
			if (default_slot) default_slot.l(div_nodes);
			t0 = claim_space(div_nodes);
			if (if_block0) if_block0.l(div_nodes);
			div_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			if_block1_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "svlt-grid-item svelte-gu74pr");

			set_style(div, "width", (/*active*/ ctx[12]
			? /*cloneBound*/ ctx[13].width
			: /*width*/ ctx[0]) + "px");

			set_style(div, "height", (/*active*/ ctx[12]
			? /*cloneBound*/ ctx[13].height
			: /*height*/ ctx[1]) + "px");

			set_style(div, "transform", "translate(" + (/*active*/ ctx[12]
			? /*cloneBound*/ ctx[13].left
			: /*left*/ ctx[2]) + "px, " + (/*active*/ ctx[12]
			? /*cloneBound*/ ctx[13].top
			: /*top*/ ctx[3]) + "px)");

			toggle_class(div, "transition", !/*active*/ ctx[12]);
			toggle_class(div, "active", /*active*/ ctx[12]);
			toggle_class(div, "no-user", /*active*/ ctx[12]);
			add_location(div, file$2, 73, 0, 1588);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			append_dev(div, t0);
			if (if_block0) if_block0.m(div, null);
			insert_dev(target, t1, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, if_block1_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = listen_dev(
					div,
					"pointerdown",
					function () {
						if (is_function((/*item*/ ctx[10]?.custom)
						? null
						: /*draggable*/ ctx[5] && /*pointerdown*/ ctx[14])) ((/*item*/ ctx[10]?.custom)
						? null
						: /*draggable*/ ctx[5] && /*pointerdown*/ ctx[14]).apply(this, arguments);
					},
					false,
					false,
					false
				);

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (default_slot) {
				if (default_slot.p && dirty[0] & /*$$scope*/ 2097152) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[21], dirty, get_default_slot_changes, get_default_slot_context);
				}
			}

			if (/*resizable*/ ctx[4]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(div, null);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (!current || dirty[0] & /*active, cloneBound, width*/ 12289) {
				set_style(div, "width", (/*active*/ ctx[12]
				? /*cloneBound*/ ctx[13].width
				: /*width*/ ctx[0]) + "px");
			}

			if (!current || dirty[0] & /*active, cloneBound, height*/ 12290) {
				set_style(div, "height", (/*active*/ ctx[12]
				? /*cloneBound*/ ctx[13].height
				: /*height*/ ctx[1]) + "px");
			}

			if (!current || dirty[0] & /*active, cloneBound, left, top*/ 12300) {
				set_style(div, "transform", "translate(" + (/*active*/ ctx[12]
				? /*cloneBound*/ ctx[13].left
				: /*left*/ ctx[2]) + "px, " + (/*active*/ ctx[12]
				? /*cloneBound*/ ctx[13].top
				: /*top*/ ctx[3]) + "px)");
			}

			if (dirty[0] & /*active*/ 4096) {
				toggle_class(div, "transition", !/*active*/ ctx[12]);
			}

			if (dirty[0] & /*active*/ 4096) {
				toggle_class(div, "active", /*active*/ ctx[12]);
			}

			if (dirty[0] & /*active*/ 4096) {
				toggle_class(div, "no-user", /*active*/ ctx[12]);
			}

			if (/*active*/ ctx[12]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$1(ctx);
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
			if (if_block0) if_block0.d();
			if (detaching) detach_dev(t1);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach_dev(if_block1_anchor);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("MoveResize", slots, ['default']);
	const dispatch = createEventDispatcher();
	let { width } = $$props;
	let { height } = $$props;
	let { left } = $$props;
	let { top } = $$props;
	let { resizable } = $$props;
	let { draggable } = $$props;
	let { id } = $$props;
	let { xPerPx } = $$props;
	let { yPerPx } = $$props;
	let { gapX } = $$props;
	let { gapY } = $$props;
	let { item } = $$props;
	let { dynamic } = $$props;
	let { max } = $$props;
	let { min } = $$props;
	let { cols } = $$props;

	let shadow = {
		x: item?.x,
		y: item?.y,
		w: item?.w,
		h: item?.h
	};

	let active = false;
	let debounce = false;
	let initX, initY;
	let xyRef = { x: left, y: top };
	let newXY = { x: 0, y: 0 };
	let cloneBound = { width, height, top, left };

	const inActivate = () => {
		$$invalidate(12, active = false);
		dispatch("pointerup", { id });
	};

	let repaint = (listen = true) => {
		const onUpdate = !listen ? false : inActivate;
		dispatch("repaint", { id, shadow, onUpdate });
	};

	beforeUpdate(() => {
		if (xPerPx && !debounce) {
			xyRef = { x: left, y: top };

			$$invalidate(11, shadow = {
				x: item?.x,
				y: item?.y,
				w: item?.w,
				h: item?.h
			});

			debounce = true;
		}
	});

	const pointerdown = ({ pageX, pageY, clientX, clientY }) => {
		initX = pageX;
		initY = pageY;
		$$invalidate(13, cloneBound = { width, height, top, left });
		debounce = false;
		$$invalidate(12, active = true);
		window.addEventListener("pointermove", pointermove);
		window.addEventListener("pointerup", pointerup);
		window.addEventListener("pointercancel", pointerup);
	};

	const pointermove = ({ pageX, pageY, clientX, clientY }) => {
		newXY = { x: initX - pageX, y: initY - pageY };
		$$invalidate(13, cloneBound.left = xyRef.x - newXY.x, cloneBound);
		$$invalidate(13, cloneBound.top = xyRef.y - newXY.y, cloneBound);
		let gridX = Math.round(cloneBound.left / xPerPx);
		let gridY = Math.round(cloneBound.top / yPerPx);
		$$invalidate(11, shadow.x = Math.max(Math.min(gridX, cols - shadow.w), 0), shadow);
		$$invalidate(11, shadow.y = Math.max(gridY, 0), shadow);
		if (dynamic) repaint(false);
	};

	const pointerup = e => {
		xyRef.x -= newXY.x;
		xyRef.y -= newXY.y;
		window.removeEventListener("pointerdown", pointerdown);
		window.removeEventListener("pointermove", pointermove);
		window.removeEventListener("pointerup", pointerup);
		window.removeEventListener("pointercancel", pointerup);
		repaint();
	};

	// Resize
	let resizeInitX, resizeInitY;

	let initialWidth = 0;
	let initialHeight = 0;

	const resizePointerDown = e => {
		e.stopPropagation();
		const { pageX, pageY } = e;
		resizeInitX = pageX;
		resizeInitY = pageY;
		initialWidth = width;
		initialHeight = height;
		$$invalidate(13, cloneBound = { width, height, top, left });
		$$invalidate(12, active = true);
		const { x, y, w, h } = item;
		$$invalidate(11, shadow = { x, y, w, h });
		window.addEventListener("pointermove", resizePointerMove);
		window.addEventListener("pointerup", resizePointerUp);
		window.addEventListener("pointercancel", resizePointerUp);
	};

	const resizePointerMove = ({ pageX, pageY }) => {
		$$invalidate(13, cloneBound.width = initialWidth + pageX - resizeInitX, cloneBound);
		$$invalidate(13, cloneBound.height = initialHeight + pageY - resizeInitY, cloneBound);
		$$invalidate(11, shadow.w = Math.round(cloneBound.width / xPerPx), shadow);
		$$invalidate(11, shadow.h = Math.round(cloneBound.height / yPerPx), shadow);
		let maxWidth = Math.min(max.w, cols) || cols;
		$$invalidate(11, shadow.w = Math.max(Math.min(maxWidth, shadow.w), min.w), shadow);
		$$invalidate(11, shadow.h = Math.max(shadow.h, min.h), shadow);

		if (max.h) {
			$$invalidate(11, shadow.h = Math.min(max.h, shadow.h), shadow);
		}
	};

	const resizePointerUp = e => {
		e.stopPropagation();
		repaint();
		window.removeEventListener("pointermove", resizePointerMove);
		window.removeEventListener("pointerup", resizePointerUp);
		window.removeEventListener("pointercancel", resizePointerUp);
	};

	const writable_props = [
		"width",
		"height",
		"left",
		"top",
		"resizable",
		"draggable",
		"id",
		"xPerPx",
		"yPerPx",
		"gapX",
		"gapY",
		"item",
		"dynamic",
		"max",
		"min",
		"cols"
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<MoveResize> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("left" in $$props) $$invalidate(2, left = $$props.left);
		if ("top" in $$props) $$invalidate(3, top = $$props.top);
		if ("resizable" in $$props) $$invalidate(4, resizable = $$props.resizable);
		if ("draggable" in $$props) $$invalidate(5, draggable = $$props.draggable);
		if ("id" in $$props) $$invalidate(16, id = $$props.id);
		if ("xPerPx" in $$props) $$invalidate(6, xPerPx = $$props.xPerPx);
		if ("yPerPx" in $$props) $$invalidate(7, yPerPx = $$props.yPerPx);
		if ("gapX" in $$props) $$invalidate(8, gapX = $$props.gapX);
		if ("gapY" in $$props) $$invalidate(9, gapY = $$props.gapY);
		if ("item" in $$props) $$invalidate(10, item = $$props.item);
		if ("dynamic" in $$props) $$invalidate(17, dynamic = $$props.dynamic);
		if ("max" in $$props) $$invalidate(18, max = $$props.max);
		if ("min" in $$props) $$invalidate(19, min = $$props.min);
		if ("cols" in $$props) $$invalidate(20, cols = $$props.cols);
		if ("$$scope" in $$props) $$invalidate(21, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		beforeUpdate,
		dispatch,
		width,
		height,
		left,
		top,
		resizable,
		draggable,
		id,
		xPerPx,
		yPerPx,
		gapX,
		gapY,
		item,
		dynamic,
		max,
		min,
		cols,
		shadow,
		active,
		debounce,
		initX,
		initY,
		xyRef,
		newXY,
		cloneBound,
		inActivate,
		repaint,
		pointerdown,
		pointermove,
		pointerup,
		resizeInitX,
		resizeInitY,
		initialWidth,
		initialHeight,
		resizePointerDown,
		resizePointerMove,
		resizePointerUp
	});

	$$self.$inject_state = $$props => {
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("left" in $$props) $$invalidate(2, left = $$props.left);
		if ("top" in $$props) $$invalidate(3, top = $$props.top);
		if ("resizable" in $$props) $$invalidate(4, resizable = $$props.resizable);
		if ("draggable" in $$props) $$invalidate(5, draggable = $$props.draggable);
		if ("id" in $$props) $$invalidate(16, id = $$props.id);
		if ("xPerPx" in $$props) $$invalidate(6, xPerPx = $$props.xPerPx);
		if ("yPerPx" in $$props) $$invalidate(7, yPerPx = $$props.yPerPx);
		if ("gapX" in $$props) $$invalidate(8, gapX = $$props.gapX);
		if ("gapY" in $$props) $$invalidate(9, gapY = $$props.gapY);
		if ("item" in $$props) $$invalidate(10, item = $$props.item);
		if ("dynamic" in $$props) $$invalidate(17, dynamic = $$props.dynamic);
		if ("max" in $$props) $$invalidate(18, max = $$props.max);
		if ("min" in $$props) $$invalidate(19, min = $$props.min);
		if ("cols" in $$props) $$invalidate(20, cols = $$props.cols);
		if ("shadow" in $$props) $$invalidate(11, shadow = $$props.shadow);
		if ("active" in $$props) $$invalidate(12, active = $$props.active);
		if ("debounce" in $$props) debounce = $$props.debounce;
		if ("initX" in $$props) initX = $$props.initX;
		if ("initY" in $$props) initY = $$props.initY;
		if ("xyRef" in $$props) xyRef = $$props.xyRef;
		if ("newXY" in $$props) newXY = $$props.newXY;
		if ("cloneBound" in $$props) $$invalidate(13, cloneBound = $$props.cloneBound);
		if ("repaint" in $$props) repaint = $$props.repaint;
		if ("resizeInitX" in $$props) resizeInitX = $$props.resizeInitX;
		if ("resizeInitY" in $$props) resizeInitY = $$props.resizeInitY;
		if ("initialWidth" in $$props) initialWidth = $$props.initialWidth;
		if ("initialHeight" in $$props) initialHeight = $$props.initialHeight;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		width,
		height,
		left,
		top,
		resizable,
		draggable,
		xPerPx,
		yPerPx,
		gapX,
		gapY,
		item,
		shadow,
		active,
		cloneBound,
		pointerdown,
		resizePointerDown,
		id,
		dynamic,
		max,
		min,
		cols,
		$$scope,
		slots
	];
}

class MoveResize extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance$2,
			create_fragment$2,
			safe_not_equal,
			{
				width: 0,
				height: 1,
				left: 2,
				top: 3,
				resizable: 4,
				draggable: 5,
				id: 16,
				xPerPx: 6,
				yPerPx: 7,
				gapX: 8,
				gapY: 9,
				item: 10,
				dynamic: 17,
				max: 18,
				min: 19,
				cols: 20
			},
			[-1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "MoveResize",
			options,
			id: create_fragment$2.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*width*/ ctx[0] === undefined && !("width" in props)) {
			console.warn("<MoveResize> was created without expected prop 'width'");
		}

		if (/*height*/ ctx[1] === undefined && !("height" in props)) {
			console.warn("<MoveResize> was created without expected prop 'height'");
		}

		if (/*left*/ ctx[2] === undefined && !("left" in props)) {
			console.warn("<MoveResize> was created without expected prop 'left'");
		}

		if (/*top*/ ctx[3] === undefined && !("top" in props)) {
			console.warn("<MoveResize> was created without expected prop 'top'");
		}

		if (/*resizable*/ ctx[4] === undefined && !("resizable" in props)) {
			console.warn("<MoveResize> was created without expected prop 'resizable'");
		}

		if (/*draggable*/ ctx[5] === undefined && !("draggable" in props)) {
			console.warn("<MoveResize> was created without expected prop 'draggable'");
		}

		if (/*id*/ ctx[16] === undefined && !("id" in props)) {
			console.warn("<MoveResize> was created without expected prop 'id'");
		}

		if (/*xPerPx*/ ctx[6] === undefined && !("xPerPx" in props)) {
			console.warn("<MoveResize> was created without expected prop 'xPerPx'");
		}

		if (/*yPerPx*/ ctx[7] === undefined && !("yPerPx" in props)) {
			console.warn("<MoveResize> was created without expected prop 'yPerPx'");
		}

		if (/*gapX*/ ctx[8] === undefined && !("gapX" in props)) {
			console.warn("<MoveResize> was created without expected prop 'gapX'");
		}

		if (/*gapY*/ ctx[9] === undefined && !("gapY" in props)) {
			console.warn("<MoveResize> was created without expected prop 'gapY'");
		}

		if (/*item*/ ctx[10] === undefined && !("item" in props)) {
			console.warn("<MoveResize> was created without expected prop 'item'");
		}

		if (/*dynamic*/ ctx[17] === undefined && !("dynamic" in props)) {
			console.warn("<MoveResize> was created without expected prop 'dynamic'");
		}

		if (/*max*/ ctx[18] === undefined && !("max" in props)) {
			console.warn("<MoveResize> was created without expected prop 'max'");
		}

		if (/*min*/ ctx[19] === undefined && !("min" in props)) {
			console.warn("<MoveResize> was created without expected prop 'min'");
		}

		if (/*cols*/ ctx[20] === undefined && !("cols" in props)) {
			console.warn("<MoveResize> was created without expected prop 'cols'");
		}
	}

	get width() {
		throw new Error("<MoveResize>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<MoveResize>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<MoveResize>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<MoveResize>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get left() {
		throw new Error("<MoveResize>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set left(value) {
		throw new Error("<MoveResize>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get top() {
		throw new Error("<MoveResize>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set top(value) {
		throw new Error("<MoveResize>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get resizable() {
		throw new Error("<MoveResize>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set resizable(value) {
		throw new Error("<MoveResize>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get draggable() {
		throw new Error("<MoveResize>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set draggable(value) {
		throw new Error("<MoveResize>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<MoveResize>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<MoveResize>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get xPerPx() {
		throw new Error("<MoveResize>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set xPerPx(value) {
		throw new Error("<MoveResize>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get yPerPx() {
		throw new Error("<MoveResize>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set yPerPx(value) {
		throw new Error("<MoveResize>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get gapX() {
		throw new Error("<MoveResize>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set gapX(value) {
		throw new Error("<MoveResize>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get gapY() {
		throw new Error("<MoveResize>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set gapY(value) {
		throw new Error("<MoveResize>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get item() {
		throw new Error("<MoveResize>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set item(value) {
		throw new Error("<MoveResize>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get dynamic() {
		throw new Error("<MoveResize>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set dynamic(value) {
		throw new Error("<MoveResize>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get max() {
		throw new Error("<MoveResize>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set max(value) {
		throw new Error("<MoveResize>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get min() {
		throw new Error("<MoveResize>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set min(value) {
		throw new Error("<MoveResize>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get cols() {
		throw new Error("<MoveResize>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set cols(value) {
		throw new Error("<MoveResize>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\svelte-grid\src\index.svelte generated by Svelte v3.29.3 */
const file$3 = "node_modules\\svelte-grid\\src\\index.svelte";

const get_default_slot_changes$1 = dirty => ({
	pointerdown: dirty & /*pointerdown*/ 536870912,
	dataItem: dirty & /*items*/ 1,
	item: dirty & /*items, getComputedCols*/ 5,
	index: dirty & /*items*/ 1
});

const get_default_slot_context$1 = ctx => ({
	pointerdown: /*pointerdown*/ ctx[29],
	dataItem: /*item*/ ctx[26],
	item: /*item*/ ctx[26][/*getComputedCols*/ ctx[2]],
	index: /*i*/ ctx[28]
});

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[26] = list[i];
	child_ctx[28] = i;
	return child_ctx;
}

// (9:4) <MoveResize       on:repaint={handleRepaint}       on:pointerup={pointerup}       id={item.id}       index={i}       resizable={item[getComputedCols]?.resizable}       draggable={item[getComputedCols]?.draggable}       {xPerPx}       {yPerPx}       width={Math.min(getComputedCols, item[getComputedCols]?.w) * xPerPx - gapX * 2}       height={item[getComputedCols]?.h * yPerPx - gapX * 2}       top={item[getComputedCols]?.y * yPerPx + gapY}       left={item[getComputedCols]?.x * xPerPx + gapX}       item={item[getComputedCols]}       min={item[getComputedCols]?.min}       max={item[getComputedCols]?.max}       {dynamic}       cols={getComputedCols}       {gapX}       {gapY}       let:pointerdown>
function create_default_slot$1(ctx) {
	let t;
	let current;
	const default_slot_template = /*#slots*/ ctx[17].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[19], get_default_slot_context$1);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
			t = space();
		},
		l: function claim(nodes) {
			if (default_slot) default_slot.l(nodes);
			t = claim_space(nodes);
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			insert_dev(target, t, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope, pointerdown, items, getComputedCols*/ 537395205) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[19], dirty, get_default_slot_changes$1, get_default_slot_context$1);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(9:4) <MoveResize       on:repaint={handleRepaint}       on:pointerup={pointerup}       id={item.id}       index={i}       resizable={item[getComputedCols]?.resizable}       draggable={item[getComputedCols]?.draggable}       {xPerPx}       {yPerPx}       width={Math.min(getComputedCols, item[getComputedCols]?.w) * xPerPx - gapX * 2}       height={item[getComputedCols]?.h * yPerPx - gapX * 2}       top={item[getComputedCols]?.y * yPerPx + gapY}       left={item[getComputedCols]?.x * xPerPx + gapX}       item={item[getComputedCols]}       min={item[getComputedCols]?.min}       max={item[getComputedCols]?.max}       {dynamic}       cols={getComputedCols}       {gapX}       {gapY}       let:pointerdown>",
		ctx
	});

	return block;
}

// (8:2) {#each items as item, i (item.id)}
function create_each_block(key_1, ctx) {
	let first;
	let moveresize;
	let current;

	moveresize = new MoveResize({
			props: {
				id: /*item*/ ctx[26].id,
				index: /*i*/ ctx[28],
				resizable: /*item*/ ctx[26][/*getComputedCols*/ ctx[2]]?.resizable,
				draggable: /*item*/ ctx[26][/*getComputedCols*/ ctx[2]]?.draggable,
				xPerPx: /*xPerPx*/ ctx[4],
				yPerPx: /*yPerPx*/ ctx[8],
				width: Math.min(/*getComputedCols*/ ctx[2], /*item*/ ctx[26][/*getComputedCols*/ ctx[2]]?.w) * /*xPerPx*/ ctx[4] - /*gapX*/ ctx[5] * 2,
				height: /*item*/ ctx[26][/*getComputedCols*/ ctx[2]]?.h * /*yPerPx*/ ctx[8] - /*gapX*/ ctx[5] * 2,
				top: /*item*/ ctx[26][/*getComputedCols*/ ctx[2]]?.y * /*yPerPx*/ ctx[8] + /*gapY*/ ctx[6],
				left: /*item*/ ctx[26][/*getComputedCols*/ ctx[2]]?.x * /*xPerPx*/ ctx[4] + /*gapX*/ ctx[5],
				item: /*item*/ ctx[26][/*getComputedCols*/ ctx[2]],
				min: /*item*/ ctx[26][/*getComputedCols*/ ctx[2]]?.min,
				max: /*item*/ ctx[26][/*getComputedCols*/ ctx[2]]?.max,
				dynamic: /*dynamic*/ ctx[1],
				cols: /*getComputedCols*/ ctx[2],
				gapX: /*gapX*/ ctx[5],
				gapY: /*gapY*/ ctx[6],
				$$slots: {
					default: [
						create_default_slot$1,
						({ pointerdown }) => ({ 29: pointerdown }),
						({ pointerdown }) => pointerdown ? 536870912 : 0
					]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	moveresize.$on("repaint", /*handleRepaint*/ ctx[10]);
	moveresize.$on("pointerup", /*pointerup*/ ctx[9]);

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			first = empty();
			create_component(moveresize.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			first = empty();
			claim_component(moveresize.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			this.first = first;
		},
		m: function mount(target, anchor) {
			insert_dev(target, first, anchor);
			mount_component(moveresize, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const moveresize_changes = {};
			if (dirty & /*items*/ 1) moveresize_changes.id = /*item*/ ctx[26].id;
			if (dirty & /*items*/ 1) moveresize_changes.index = /*i*/ ctx[28];
			if (dirty & /*items, getComputedCols*/ 5) moveresize_changes.resizable = /*item*/ ctx[26][/*getComputedCols*/ ctx[2]]?.resizable;
			if (dirty & /*items, getComputedCols*/ 5) moveresize_changes.draggable = /*item*/ ctx[26][/*getComputedCols*/ ctx[2]]?.draggable;
			if (dirty & /*xPerPx*/ 16) moveresize_changes.xPerPx = /*xPerPx*/ ctx[4];
			if (dirty & /*getComputedCols, items, xPerPx, gapX*/ 53) moveresize_changes.width = Math.min(/*getComputedCols*/ ctx[2], /*item*/ ctx[26][/*getComputedCols*/ ctx[2]]?.w) * /*xPerPx*/ ctx[4] - /*gapX*/ ctx[5] * 2;
			if (dirty & /*items, getComputedCols, gapX*/ 37) moveresize_changes.height = /*item*/ ctx[26][/*getComputedCols*/ ctx[2]]?.h * /*yPerPx*/ ctx[8] - /*gapX*/ ctx[5] * 2;
			if (dirty & /*items, getComputedCols, gapY*/ 69) moveresize_changes.top = /*item*/ ctx[26][/*getComputedCols*/ ctx[2]]?.y * /*yPerPx*/ ctx[8] + /*gapY*/ ctx[6];
			if (dirty & /*items, getComputedCols, xPerPx, gapX*/ 53) moveresize_changes.left = /*item*/ ctx[26][/*getComputedCols*/ ctx[2]]?.x * /*xPerPx*/ ctx[4] + /*gapX*/ ctx[5];
			if (dirty & /*items, getComputedCols*/ 5) moveresize_changes.item = /*item*/ ctx[26][/*getComputedCols*/ ctx[2]];
			if (dirty & /*items, getComputedCols*/ 5) moveresize_changes.min = /*item*/ ctx[26][/*getComputedCols*/ ctx[2]]?.min;
			if (dirty & /*items, getComputedCols*/ 5) moveresize_changes.max = /*item*/ ctx[26][/*getComputedCols*/ ctx[2]]?.max;
			if (dirty & /*dynamic*/ 2) moveresize_changes.dynamic = /*dynamic*/ ctx[1];
			if (dirty & /*getComputedCols*/ 4) moveresize_changes.cols = /*getComputedCols*/ ctx[2];
			if (dirty & /*gapX*/ 32) moveresize_changes.gapX = /*gapX*/ ctx[5];
			if (dirty & /*gapY*/ 64) moveresize_changes.gapY = /*gapY*/ ctx[6];

			if (dirty & /*$$scope, pointerdown, items, getComputedCols*/ 537395205) {
				moveresize_changes.$$scope = { dirty, ctx };
			}

			moveresize.$set(moveresize_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(moveresize.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(moveresize.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(first);
			destroy_component(moveresize, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(8:2) {#each items as item, i (item.id)}",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let div;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let current;
	let each_value = /*items*/ ctx[0];
	validate_each_argument(each_value);
	const get_key = ctx => /*item*/ ctx[26].id;
	validate_each_keys(ctx, each_value, get_each_context, get_key);

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "svlt-grid-container svelte-72eorp");
			set_style(div, "height", /*containerHeight*/ ctx[7] + "px");
			add_location(div, file$3, 6, 0, 140);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			/*div_binding*/ ctx[18](div);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*items, getComputedCols, xPerPx, yPerPx, Math, gapX, gapY, dynamic, handleRepaint, pointerup, $$scope, pointerdown*/ 537397111) {
				const each_value = /*items*/ ctx[0];
				validate_each_argument(each_value);
				group_outros();
				validate_each_keys(ctx, each_value, get_each_context, get_key);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, outro_and_destroy_block, create_each_block, null, get_each_context);
				check_outros();
			}

			if (!current || dirty & /*containerHeight*/ 128) {
				set_style(div, "height", /*containerHeight*/ ctx[7] + "px");
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			/*div_binding*/ ctx[18](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Src", slots, ['default']);
	const dispatch = createEventDispatcher();
	let { items } = $$props;
	let { rowHeight } = $$props;
	let { cols } = $$props;
	let { gap = [10, 10] } = $$props;
	let { dynamicCols = true } = $$props;
	let { debounceUpdate = 100 } = $$props;
	let { debounceResize = 100 } = $$props;
	let { dynamic = false } = $$props;
	let getComputedCols;
	let container;
	let xPerPx = 0;
	let yPerPx = rowHeight;
	let documentWidth;
	let containerWidth;
	let prevCols;

	const pointerup = ev => {
		dispatch("pointerup", { id: ev.detail.id, cols: getComputedCols });
	};

	const onResize = debounce(
		() => {
			dispatch("resize", {
				cols: getComputedCols,
				xPerPx,
				yPerPx,
				width: containerWidth
			});
		},
		debounceResize
	);

	onMount(() => {
		const sizeObserver = new ResizeObserver(entries => {
				let width = entries[0].contentRect.width;
				if (width === containerWidth) return;
				$$invalidate(2, getComputedCols = getColumn(width, cols));
				$$invalidate(4, xPerPx = width / getComputedCols);

				if (!containerWidth) {
					dispatch("mount", {
						cols: getComputedCols,
						xPerPx,
						yPerPx, // same as rowHeight
						
					});
				} else {
					onResize();
				}

				$$invalidate(20, containerWidth = width);
			});

		sizeObserver.observe(container);
		return () => sizeObserver.disconnect();
	});

	const updateMatrix = ({ detail }) => {
		let activeItem = getItemById(detail.id, items);

		if (activeItem) {
			activeItem = {
				...activeItem,
				[getComputedCols]: {
					...activeItem[getComputedCols],
					...detail.shadow
				}
			};

			$$invalidate(0, items = moveItem(activeItem, items, getComputedCols, getItemById(detail.id, items)));
			if (detail.onUpdate) detail.onUpdate();

			dispatch("change", {
				unsafeItem: activeItem,
				id: activeItem.id,
				cols: getComputedCols
			});
		}
	};

	const handleRepaint = debounce(updateMatrix, debounceUpdate);

	const writable_props = [
		"items",
		"rowHeight",
		"cols",
		"gap",
		"dynamicCols",
		"debounceUpdate",
		"debounceResize",
		"dynamic"
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Src> was created with unknown prop '${key}'`);
	});

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			container = $$value;
			$$invalidate(3, container);
		});
	}

	$$self.$$set = $$props => {
		if ("items" in $$props) $$invalidate(0, items = $$props.items);
		if ("rowHeight" in $$props) $$invalidate(11, rowHeight = $$props.rowHeight);
		if ("cols" in $$props) $$invalidate(12, cols = $$props.cols);
		if ("gap" in $$props) $$invalidate(13, gap = $$props.gap);
		if ("dynamicCols" in $$props) $$invalidate(14, dynamicCols = $$props.dynamicCols);
		if ("debounceUpdate" in $$props) $$invalidate(15, debounceUpdate = $$props.debounceUpdate);
		if ("debounceResize" in $$props) $$invalidate(16, debounceResize = $$props.debounceResize);
		if ("dynamic" in $$props) $$invalidate(1, dynamic = $$props.dynamic);
		if ("$$scope" in $$props) $$invalidate(19, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		getContainerHeight,
		moveItem,
		getItemById,
		onMount,
		createEventDispatcher,
		debounce,
		getColumn,
		MoveResize,
		dispatch,
		items,
		rowHeight,
		cols,
		gap,
		dynamicCols,
		debounceUpdate,
		debounceResize,
		dynamic,
		getComputedCols,
		container,
		xPerPx,
		yPerPx,
		documentWidth,
		containerWidth,
		prevCols,
		pointerup,
		onResize,
		updateMatrix,
		handleRepaint,
		gapX,
		gapY,
		containerHeight
	});

	$$self.$inject_state = $$props => {
		if ("items" in $$props) $$invalidate(0, items = $$props.items);
		if ("rowHeight" in $$props) $$invalidate(11, rowHeight = $$props.rowHeight);
		if ("cols" in $$props) $$invalidate(12, cols = $$props.cols);
		if ("gap" in $$props) $$invalidate(13, gap = $$props.gap);
		if ("dynamicCols" in $$props) $$invalidate(14, dynamicCols = $$props.dynamicCols);
		if ("debounceUpdate" in $$props) $$invalidate(15, debounceUpdate = $$props.debounceUpdate);
		if ("debounceResize" in $$props) $$invalidate(16, debounceResize = $$props.debounceResize);
		if ("dynamic" in $$props) $$invalidate(1, dynamic = $$props.dynamic);
		if ("getComputedCols" in $$props) $$invalidate(2, getComputedCols = $$props.getComputedCols);
		if ("container" in $$props) $$invalidate(3, container = $$props.container);
		if ("xPerPx" in $$props) $$invalidate(4, xPerPx = $$props.xPerPx);
		if ("yPerPx" in $$props) $$invalidate(8, yPerPx = $$props.yPerPx);
		if ("documentWidth" in $$props) documentWidth = $$props.documentWidth;
		if ("containerWidth" in $$props) $$invalidate(20, containerWidth = $$props.containerWidth);
		if ("prevCols" in $$props) $$invalidate(21, prevCols = $$props.prevCols);
		if ("gapX" in $$props) $$invalidate(5, gapX = $$props.gapX);
		if ("gapY" in $$props) $$invalidate(6, gapY = $$props.gapY);
		if ("containerHeight" in $$props) $$invalidate(7, containerHeight = $$props.containerHeight);
	};

	let gapX;
	let gapY;
	let containerHeight;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*gap*/ 8192) {
			 $$invalidate(5, [gapX, gapY] = gap, gapX, ($$invalidate(6, gapY), $$invalidate(13, gap)));
		}

		if ($$self.$$.dirty & /*items, getComputedCols*/ 5) {
			 $$invalidate(7, containerHeight = getContainerHeight(items, yPerPx, getComputedCols));
		}

		if ($$self.$$.dirty & /*prevCols, cols, dynamicCols, containerWidth*/ 3166208) {
			 {
				if (prevCols !== cols && dynamicCols) {
					$$invalidate(4, xPerPx = containerWidth / cols);
				}

				$$invalidate(21, prevCols = cols);
			}
		}
	};

	return [
		items,
		dynamic,
		getComputedCols,
		container,
		xPerPx,
		gapX,
		gapY,
		containerHeight,
		yPerPx,
		pointerup,
		handleRepaint,
		rowHeight,
		cols,
		gap,
		dynamicCols,
		debounceUpdate,
		debounceResize,
		slots,
		div_binding,
		$$scope
	];
}

class Src extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
			items: 0,
			rowHeight: 11,
			cols: 12,
			gap: 13,
			dynamicCols: 14,
			debounceUpdate: 15,
			debounceResize: 16,
			dynamic: 1
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Src",
			options,
			id: create_fragment$3.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*items*/ ctx[0] === undefined && !("items" in props)) {
			console.warn("<Src> was created without expected prop 'items'");
		}

		if (/*rowHeight*/ ctx[11] === undefined && !("rowHeight" in props)) {
			console.warn("<Src> was created without expected prop 'rowHeight'");
		}

		if (/*cols*/ ctx[12] === undefined && !("cols" in props)) {
			console.warn("<Src> was created without expected prop 'cols'");
		}
	}

	get items() {
		throw new Error("<Src>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set items(value) {
		throw new Error("<Src>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rowHeight() {
		throw new Error("<Src>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rowHeight(value) {
		throw new Error("<Src>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get cols() {
		throw new Error("<Src>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set cols(value) {
		throw new Error("<Src>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get gap() {
		throw new Error("<Src>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set gap(value) {
		throw new Error("<Src>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get dynamicCols() {
		throw new Error("<Src>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set dynamicCols(value) {
		throw new Error("<Src>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get debounceUpdate() {
		throw new Error("<Src>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set debounceUpdate(value) {
		throw new Error("<Src>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get debounceResize() {
		throw new Error("<Src>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set debounceResize(value) {
		throw new Error("<Src>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get dynamic() {
		throw new Error("<Src>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set dynamic(value) {
		throw new Error("<Src>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

function getRowsCount$1(items, cols) {
  return Math.max(
    ...items.map((val) => {
      const item = val[cols];
      return item?.y + item?.h;
    }),
    1,
  );
}

const makeMatrix$1 = (rows, cols) => Array.from(Array(rows), () => new Array(cols)); // make 2d array

function makeMatrixFromItems(items, _row, _col) {
  let matrix = makeMatrix$1(_row, _col);

  for (var i = 0; i < items.length; i++) {
    const value = items[i][_col];
    const { x, y, h } = value;
    const id = items[i];
    const w = Math.min(_col, value.w);

    for (var j = y; j < y + h; j++) {
      const row = matrix[j];
      for (var k = x; k < x + w; k++) {
        row[k] = { ...value, id };
      }
    }
  }
  return matrix;
}

function findCloseBlocks$1(items, matrix, curObject) {
  const { h, x, y } = curObject;

  const w = Math.min(matrix[0].length, curObject.w);
  const tempR = matrix.slice(y, y + h);

  let result = [];
  for (var i = 0; i < tempR.length; i++) {
    let tempA = tempR[i].slice(x, x + w);
    result = [...result, ...tempA.map((val) => val.id && val.id !== curObject.id && val.id).filter(Boolean)];
  }

  return [...new Set(result)];
}

function makeMatrixFromItemsIgnore$1(items, ignoreList, _row, _col) {
  let matrix = makeMatrix$1(_row, _col);
  for (var i = 0; i < items.length; i++) {
    const value = items[i][_col];
    const id = items[i].id;
    const { x, y, h } = value;
    const w = Math.min(_col, value.w);

    if (ignoreList.indexOf(id) === -1) {
      for (var j = y; j < y + h; j++) {
        const row = matrix[j];
        if (row) {
          for (var k = x; k < x + w; k++) {
            row[k] = { ...value, id };
          }
        }
      }
    }
  }
  return matrix;
}

function findItemsById$1(closeBlocks, items) {
  return items.filter((value) => closeBlocks.indexOf(value.id) !== -1);
}

function findFreeSpaceForItem$1(matrix, item, items = []) {
  const cols = matrix[0].length;
  const w = Math.min(cols, item.w);
  let xNtime = cols - w;

  for (var i = 0; i < matrix.length; i++) {
    const row = matrix[i];
    for (var j = 0; j < xNtime + 1; j++) {
      const sliceA = row.slice(j, j + w);
      const empty = sliceA.every((val) => val === undefined);
      if (empty) {
        const isEmpty = matrix.slice(i, i + item.h).every((a) => a.slice(j, j + w).every((n) => n === undefined));

        if (isEmpty) {
          return { y: i, x: j };
        }
      }
    }
  }

  return {
    y: getRowsCount$1(items, cols),
    x: 0,
  };
}

const getItem$1 = (item, col) => {
  return { ...item[col], id: item.id };
};

const updateItem$1 = (elements, active, position, col) => {
  return elements.map((value) => {
    if (value.id === active.id) {
      return { ...value, [col]: { ...value[col], ...position } };
    }
    return value;
  });
};

function moveItem$1(active, items, cols, original) {
  // Get current item from the breakpoint
  const item = getItem$1(active, cols);
  // Create matrix from the items expect the active
  let matrix = makeMatrixFromItemsIgnore$1(items, [item.id], getRowsCount$1(items, cols), cols);
  // Getting the ids of items under active Array<String>
  const closeBlocks = findCloseBlocks$1(items, matrix, item);
  // Getting the objects of items under active Array<Object>
  let closeObj = findItemsById$1(closeBlocks, items);
  // Getting whenever of these items is fixed
  const fixed = closeObj.find((value) => value[cols].fixed);

  // If found fixed, reset the active to its original position
  if (fixed) return items;

  // Update items
  items = updateItem$1(items, active, item, cols);

  // Create matrix of items expect close elements
  matrix = makeMatrixFromItemsIgnore$1(items, closeBlocks, getRowsCount$1(items, cols), cols);

  // Create temp vars
  let tempItems = items;
  let tempCloseBlocks = closeBlocks;

  // Exclude resolved elements ids in array
  let exclude = [];

  // Iterate over close elements under active item
  closeObj.forEach((item) => {
    // Find position for element
    let position = findFreeSpaceForItem$1(matrix, item[cols], tempItems);
    // Exclude item
    exclude.push(item.id);

    // If position is found
    if (position) {
      // Assign the position to the element in the column
      tempItems = updateItem$1(tempItems, item, position, cols);

      // Recreate ids of elements
      let getIgnoreItems = tempCloseBlocks.filter((value) => exclude.indexOf(value) === -1);

      // Update matrix for next iteration
      matrix = makeMatrixFromItemsIgnore$1(tempItems, getIgnoreItems, getRowsCount$1(tempItems, cols), cols);
    }
  });

  // Return result
  return tempItems;
}

// Helper function
function normalize(items, col) {
  let result = items.slice();

  result.forEach((value) => {
    const getItem = value[col];
    if (!getItem.static) {
      result = moveItem$1(getItem, result, col);
    }
  });

  return result;
}

// Helper function
function adjust(items, col) {
  let matrix = makeMatrix$1(getRowsCount$1(items, col), col);

  let res = [];

  items.forEach((item) => {
    let position = findFreeSpaceForItem$1(matrix, item[col], items);

    res.push({
      ...item,
      [col]: {
        ...item[col],
        ...position,
      },
    });

    matrix = makeMatrixFromItems(res, getRowsCount$1(res, col), col);
  });

  return res;
}

function makeItem(item) {
  const { min = { w: 1, h: 1 }, max } = item;
  return {
    fixed: false,
    resizable: !item.fixed,
    draggable: !item.fixed,
    min: {
      w: Math.max(1, min.w),
      h: Math.max(1, min.h),
    },
    max: { ...max },
    ...item,
  };
}

const gridHelp = {
  normalize(items, col) {
    const rows = getRowsCount$1(items, col);
    return normalize(items, col);
  },

  adjust(items, col) {
    return adjust(items, col);
  },

  item(obj) {
    return makeItem(obj);
  },

  findSpace(item, items, cols) {
    let matrix = makeMatrixFromItems(items, getRowsCount$1(items, cols), cols);

    let position = findFreeSpaceForItem$1(matrix, item[cols], items);
    return position;
  },
};

/* src\components\GridMenu.svelte generated by Svelte v3.29.3 */
const file$4 = "src\\components\\GridMenu.svelte";

// (109:4) {:else}
function create_else_block(ctx) {
	let a;
	let t;

	const block = {
		c: function create() {
			a = element("a");
			t = text("see");
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true, target: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, "see");
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", "cv");
			attr_dev(a, "target", "_blank");
			add_location(a, file$4, 109, 5, 2137);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(109:4) {:else}",
		ctx
	});

	return block;
}

// (107:4) {#if options[index].info !== 'pdf'}
function create_if_block$2(ctx) {
	let p;
	let t_value = /*options*/ ctx[1][/*index*/ ctx[7]].info + "";
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			t = claim_text(p_nodes, t_value);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "svelte-sy4anr");
			add_location(p, file$4, 107, 5, 2089);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*index*/ 128 && t_value !== (t_value = /*options*/ ctx[1][/*index*/ ctx[7]].info + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$2.name,
		type: "if",
		source: "(107:4) {#if options[index].info !== 'pdf'}",
		ctx
	});

	return block;
}

// (104:0) <Grid bind:items={items} rowHeight={100} let:item {cols} let:index>
function create_default_slot$2(ctx) {
	let div;
	let h3;
	let t0_value = /*options*/ ctx[1][/*index*/ ctx[7]].title + "";
	let t0;
	let t1;

	function select_block_type(ctx, dirty) {
		if (/*options*/ ctx[1][/*index*/ ctx[7]].info !== "pdf") return create_if_block$2;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			div = element("div");
			h3 = element("h3");
			t0 = text(t0_value);
			t1 = space();
			if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h3 = claim_element(div_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, t0_value);
			h3_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h3, "class", "svelte-sy4anr");
			add_location(h3, file$4, 105, 4, 2010);
			attr_dev(div, "class", "content svelte-sy4anr");
			add_location(div, file$4, 104, 2, 1983);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h3);
			append_dev(h3, t0);
			append_dev(div, t1);
			if_block.m(div, null);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*index*/ 128 && t0_value !== (t0_value = /*options*/ ctx[1][/*index*/ ctx[7]].title + "")) set_data_dev(t0, t0_value);

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$2.name,
		type: "slot",
		source: "(104:0) <Grid bind:items={items} rowHeight={100} let:item {cols} let:index>",
		ctx
	});

	return block;
}

function create_fragment$4(ctx) {
	let h2;
	let t0;
	let t1;
	let grid;
	let updating_items;
	let current;

	function grid_items_binding(value) {
		/*grid_items_binding*/ ctx[3].call(null, value);
	}

	let grid_props = {
		rowHeight: 100,
		cols: /*cols*/ ctx[2],
		$$slots: {
			default: [
				create_default_slot$2,
				({ item, index }) => ({ 6: item, 7: index }),
				({ item, index }) => (item ? 64 : 0) | (index ? 128 : 0)
			]
		},
		$$scope: { ctx }
	};

	if (/*items*/ ctx[0] !== void 0) {
		grid_props.items = /*items*/ ctx[0];
	}

	grid = new Src({ props: grid_props, $$inline: true });
	binding_callbacks.push(() => bind(grid, "items", grid_items_binding));

	const block = {
		c: function create() {
			h2 = element("h2");
			t0 = text("Be flexible, like these boxes!");
			t1 = space();
			create_component(grid.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "Be flexible, like these boxes!");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			claim_component(grid.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "grid-menu-title svelte-sy4anr");
			add_location(h2, file$4, 97, 0, 1835);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			append_dev(h2, t0);
			insert_dev(target, t1, anchor);
			mount_component(grid, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const grid_changes = {};

			if (dirty & /*$$scope, index*/ 384) {
				grid_changes.$$scope = { dirty, ctx };
			}

			if (!updating_items && dirty & /*items*/ 1) {
				updating_items = true;
				grid_changes.items = /*items*/ ctx[0];
				add_flush_callback(() => updating_items = false);
			}

			grid.$set(grid_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(grid.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(grid.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t1);
			destroy_component(grid, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let $getPersonalLetter;
	validate_store(getPersonalLetter, "getPersonalLetter");
	component_subscribe($$self, getPersonalLetter, $$value => $$invalidate(4, $getPersonalLetter = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("GridMenu", slots, []);

	let options = [
		{
			title: "Personal letter",
			info: $getPersonalLetter
		},
		{ title: "CV", info: "pdf" },
		{ title: "Portfolio", icon: "code" },
		{ title: "Travels" },
		{ title: "Contact" }
	];

	const { item } = gridHelp;
	const id = () => "_" + Math.random().toString(36).substr(2, 9);

	let items = [
		{
			id: id(),
			5: item({ x: 0, y: 0, w: 2, h: 6 }),
			3: item({ x: 0, w: 2, h: 2, y: 0 }),
			1: item({ x: 0, y: 0, w: 1, h: 2 })
		},
		{
			id: id(),
			5: item({ x: 2, y: 0, w: 3, h: 2 }),
			3: item({ x: 2, w: 1, h: 2, y: 0 }),
			1: item({ x: 0, y: 2, w: 1, h: 2 })
		},
		{
			id: id(),
			5: item({ x: 2, y: 2, w: 3, h: 2 }),
			3: item({ x: 0, w: 3, h: 2, y: 2 }),
			1: item({ x: 0, y: 4, w: 1, h: 2 })
		}
	];

	const cols = [[1500, 5], [1024, 3], [500, 1]];
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<GridMenu> was created with unknown prop '${key}'`);
	});

	function grid_items_binding(value) {
		items = value;
		$$invalidate(0, items);
	}

	$$self.$capture_state = () => ({
		Icon,
		getPersonalLetter,
		options,
		Grid: Src,
		gridHelp,
		item,
		id,
		items,
		cols,
		$getPersonalLetter
	});

	$$self.$inject_state = $$props => {
		if ("options" in $$props) $$invalidate(1, options = $$props.options);
		if ("items" in $$props) $$invalidate(0, items = $$props.items);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [items, options, cols, grid_items_binding];
}

class GridMenu extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "GridMenu",
			options,
			id: create_fragment$4.name
		});
	}
}

/* src\routes\start.svelte generated by Svelte v3.29.3 */
const file$5 = "src\\routes\\start.svelte";

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	child_ctx[12] = i;
	return child_ctx;
}

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[9] = i;
	return child_ctx;
}

// (92:7) {#if showStart}
function create_if_block_1$1(ctx) {
	let span;
	let t_value = /*char*/ ctx[10][0] + "";
	let t;
	let span_transition;
	let current;
	let mounted;
	let dispose;

	function introend_handler(...args) {
		return /*introend_handler*/ ctx[5](/*i*/ ctx[12], ...args);
	}

	const block = {
		c: function create() {
			span = element("span");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			t = claim_text(span_nodes, t_value);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(span, file$5, 92, 8, 2007);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
			current = true;

			if (!mounted) {
				dispose = listen_dev(span, "introend", introend_handler, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
		},
		i: function intro(local) {
			if (current) return;

			if (local) {
				add_render_callback(() => {
					if (!span_transition) span_transition = create_bidirectional_transition(
						span,
						fade,
						{
							delay: /*waitTime*/ ctx[3] + /*waitTime*/ ctx[3] * /*i*/ ctx[12] + /*introLine*/ ctx[7].wait * /*waitTime*/ ctx[3]
						},
						true
					);

					span_transition.run(1);
				});
			}

			current = true;
		},
		o: function outro(local) {
			if (local) {
				if (!span_transition) span_transition = create_bidirectional_transition(
					span,
					fade,
					{
						delay: /*waitTime*/ ctx[3] + /*waitTime*/ ctx[3] * /*i*/ ctx[12] + /*introLine*/ ctx[7].wait * /*waitTime*/ ctx[3]
					},
					false
				);

				span_transition.run(0);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			if (detaching && span_transition) span_transition.end();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(92:7) {#if showStart}",
		ctx
	});

	return block;
}

// (91:6) {#each introLine.text as char, i}
function create_each_block_1(ctx) {
	let if_block_anchor;
	let if_block = /*showStart*/ ctx[0] && create_if_block_1$1(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*showStart*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*showStart*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1$1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(91:6) {#each introLine.text as char, i}",
		ctx
	});

	return block;
}

// (89:4) {#each introText as introLine, j}
function create_each_block$1(ctx) {
	let h1;
	let t;
	let each_value_1 = /*introLine*/ ctx[7].text;
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			h1 = element("h1");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(h1_nodes);
			}

			t = claim_space(h1_nodes);
			h1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "svelte-bh1zbd");
			add_location(h1, file$5, 89, 5, 1928);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(h1, null);
			}

			append_dev(h1, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*waitTime, introText, animationDone, showStart*/ 15) {
				each_value_1 = /*introLine*/ ctx[7].text;
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(h1, t);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(89:4) {#each introText as introLine, j}",
		ctx
	});

	return block;
}

// (108:1) {#if animationDone}
function create_if_block$3(ctx) {
	let div;
	let a;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			a = element("a");
			t = text("Who am I?");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			a = claim_element(div_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, "Who am I?");
			a_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", "/intro");
			attr_dev(a, "class", "svelte-bh1zbd");
			add_location(a, file$5, 109, 3, 2372);
			attr_dev(div, "class", "icon svelte-bh1zbd");
			add_location(div, file$5, 108, 2, 2349);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, a);
			append_dev(a, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$3.name,
		type: "if",
		source: "(108:1) {#if animationDone}",
		ctx
	});

	return block;
}

function create_fragment$5(ctx) {
	let title_value;
	let t0;
	let div2;
	let div1;
	let div0;
	let t1;
	let if_block_anchor;
	document.title = title_value = /*pageTitle*/ ctx[4];
	let each_value = /*introText*/ ctx[2];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	let if_block = /*animationDone*/ ctx[1] && create_if_block$3(ctx);

	const block = {
		c: function create() {
			t0 = space();
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t1 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-a7ezgp\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { style: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "intro-text-container svelte-bh1zbd");
			add_location(div0, file$5, 87, 3, 1848);
			attr_dev(div1, "class", "start-page-background svelte-bh1zbd");
			add_location(div1, file$5, 85, 2, 1806);
			set_style(div2, "height", "105vh");
			add_location(div2, file$5, 84, 1, 1776);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div2, anchor);
			append_dev(div2, div1);
			append_dev(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			insert_dev(target, t1, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*pageTitle*/ 16 && title_value !== (title_value = /*pageTitle*/ ctx[4])) {
				document.title = title_value;
			}

			if (dirty & /*introText, waitTime, animationDone, showStart*/ 15) {
				each_value = /*introText*/ ctx[2];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (/*animationDone*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$3(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div2);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t1);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$5.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$5($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Start", slots, []);

	let introText = [
		{ text: "Hi there!", wait: 0 },
		{ text: "I'm William Friefeldt.", wait: 12 },
		{
			text: "And this is my website.",
			wait: 34
		}
	];

	let showStart = false;
	let animationDone = false;
	let waitTime = 200;
	onMount(() => $$invalidate(0, showStart = true));
	let pageTitle = "William Friefeldt";
	let segment = "";
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Start> was created with unknown prop '${key}'`);
	});

	const introend_handler = i => {
		if (i === 22) $$invalidate(1, animationDone = true);
	};

	$$self.$capture_state = () => ({
		fade,
		onMount,
		FaArrowAltCircleDown,
		GridMenu,
		introText,
		showStart,
		animationDone,
		waitTime,
		pageTitle,
		segment
	});

	$$self.$inject_state = $$props => {
		if ("introText" in $$props) $$invalidate(2, introText = $$props.introText);
		if ("showStart" in $$props) $$invalidate(0, showStart = $$props.showStart);
		if ("animationDone" in $$props) $$invalidate(1, animationDone = $$props.animationDone);
		if ("waitTime" in $$props) $$invalidate(3, waitTime = $$props.waitTime);
		if ("pageTitle" in $$props) $$invalidate(4, pageTitle = $$props.pageTitle);
		if ("segment" in $$props) segment = $$props.segment;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [showStart, animationDone, introText, waitTime, pageTitle, introend_handler];
}

class Start extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Start",
			options,
			id: create_fragment$5.name
		});
	}
}

export default Start;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
